import streamlit as st
from PIL import Image
import numpy as np
#from tensorflow.keras.models import load_model
#from tensorflow.keras.preprocessing.image import img_to_array

# Chargement du mod√®le
# model = load_model('mon_model_cnn_skin.h5')  # Assure-toi que ce chemin est correct

# Dictionnaire des classes
class_names = ['Acn√©', 'Vitiligo', 'Hyperpigmentation', 'Nail Psoriasis', 'SJS-TEN']

# Interface Streamlit
st.set_page_config(page_title="CNN M√©dical en Temps R√©el", layout="centered")
st.title("üß† Classification d‚ÄôImages M√©dicales avec CNN")
st.markdown("---")

st.sidebar.image("https://upload.wikimedia.org/wikipedia/commons/6/6e/Health_Medical_icon.png", width=100)
st.sidebar.title("Navigation")
section = st.sidebar.radio("Aller √†", ["üèÅ Pr√©sentation", "üìä Dataset", "üîç Tester une Image"])

# Section pr√©sentation
if section == "üèÅ Pr√©sentation":
    st.header("Pourquoi ce projet ?")
    st.write("""
    Les maladies de la peau repr√©sentent une **pr√©occupation majeure en Afrique**, souvent n√©glig√©e.
    Ce projet d√©montre comment les **r√©seaux de neurones convolutifs (CNN)** peuvent aider √† **classifier des images dermatologiques** en temps r√©el.

    > _‚ÄúL‚ÄôIA ne remplacera pas les m√©decins, mais les m√©decins qui l‚Äôutilisent remplaceront ceux qui ne le font pas.‚Äù_
    """)
    st.markdown("#### Avantages :")
    st.markdown("- üì∏ Traitement d‚Äôimages en temps r√©el")
    st.markdown("- üß¨ D√©tection de maladies rares")
    st.markdown("- ‚öôÔ∏è Utilisation de Transfer Learning (ResNet)")

# Section dataset
elif section == "üìä Dataset":
    st.header("√Ä propos du Dataset")
    st.write("""
    Le dataset est compos√© de **9548 images dermatoscopiques** r√©parties en 5 classes :
    """)
    data = {
        "Acn√©": 1148,
        "Vitiligo": 2016,
        "Hyperpigmentation": 700,
        "Nail Psoriasis": 2520,
        "SJS-TEN": 3164
    }
    st.bar_chart(data)

    st.info("Les donn√©es proviennent de diff√©rents h√¥pitaux et ressources en ligne, permettant une diversit√© d‚Äôorigines g√©ographiques.")

# Section pr√©diction
elif section == "üîç Tester une Image":
    st.header("Tester une Image de Peau")
    uploaded_file = st.file_uploader("Upload une image", type=["jpg", "png", "jpeg"])

    if uploaded_file is not None:
        image = Image.open(uploaded_file).resize((224, 224))
        st.image(image, caption="Image upload√©e", use_column_width=True)

        # Pr√©traitement
        image_array = img_to_array(image) / 255.0
        image_array = np.expand_dims(image_array, axis=0)

        # Pr√©diction
        prediction = model.predict(image_array)
        predicted_class = class_names[np.argmax(prediction)]

        st.success(f"### ‚úÖ Diagnostic possible : **{predicted_class}**")
        st.markdown("> Cette pr√©diction est √† usage **√©ducatif** uniquement.")

